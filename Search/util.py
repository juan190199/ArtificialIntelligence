""" Data Structures useful for implementing search algorithms"""class Stack:    """"A Container with a last-in-first-out (LIFO) queuing policy"""    def __init__(self):        self.list    def push(self, object):        """Push object onto the Stack"""        self.list.append(object)    def pop(self):        """Pop the most recently pushed object from the Stack"""        self.list.pop()    def isEmpty(self):        """Returns true if the Stack is empty"""        return len(self.list) == 0class Queue:    """"A Container with a first-in-first-out (FIFO) queuing policy"""    def __init__(self):        self.list    def push(self, object):        """Enqueue the object into the queue"""        self.list.insert(0, object)    def pop(self):        """        Dequeue the earliest enqueued item still in the queue.        This operation removes the item from the queue.        """        return self.list.pop()    def isEmpty(self):        """Returns true if the Queue is empty"""        return len(self.list) == 0